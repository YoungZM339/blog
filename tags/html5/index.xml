<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HTML5 on YoungZM&#39;s Blog</title>
    <link>https://blog.youngzm.com/tags/html5/</link>
    <description>Recent content in HTML5 on YoungZM&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright 2023@YoungZM</copyright>
    <lastBuildDate>Fri, 16 Feb 2024 00:00:01 +0800</lastBuildDate>
    <atom:link href="https://blog.youngzm.com/tags/html5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>前端开发学习笔记(五) : CSS3的[新]特性</title>
      <link>https://blog.youngzm.com/post/frontend-web-notes/5/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:01 +0800</pubDate>
      <guid>https://blog.youngzm.com/post/frontend-web-notes/5/</guid>
      <description>常见 弹性盒子（Flexbox） 弹性盒子（Flexbox）用于创建灵活且响应式的布局。它通过指定容器和其内部元素的属性来实现灵活的布局。&#xA;参考：Flex 布局教程：语法篇&#xA;要使用弹性盒子布局，需要设置一个容器元素的display属性为flex或inline-flex。容器元素的子元素将成为弹性盒子的项目。&#xA;以下是弹性盒子中常用的属性和其作用：&#xA;flex-direction：指定弹性盒子的主轴方向。默认值是row，表示从左到右排列。其他值包括column（从上到下排列）、row-reverse（从右到左排列）和column-reverse（从下到上排列）。&#xA;justify-content：控制项目在主轴上的对齐方式。可以使用不同的值，如flex-start（默认值，左对齐）、flex-end（右对齐）、center（居中对齐）、space-between（两端对齐，项目之间平均分布）和space-around（项目两侧留有间隔，项目之间平均分布）。&#xA;align-items：控制项目在交叉轴上的对齐方式。可以使用不同的值，如flex-start（顶部对齐）、flex-end（底部对齐）、center（居中对齐）、baseline（基线对齐）和stretch（拉伸填充）。&#xA;flex-wrap：控制项目是否换行。默认值是nowrap，表示不换行。其他值包括wrap（换行）和wrap-reverse（反向换行）。&#xA;align-content：控制多行弹性盒子在交叉轴上的对齐方式。适用于多行弹性盒子，当有多行时，可以使用不同值来控制对齐方式。&#xA;flex-grow：指定项目的放大比例。默认值为 0，表示不放大。如果所有项目的flex-grow都为 1，则它们将平均分配剩余空间。如果一个项目的flex-grow为 2，其他项目为 1，则前者将获得更多的剩余空间。&#xA;flex-shrink：指定项目的缩小比例。默认值为 1，表示当空间不足时，项目将等比例缩小。如果一个项目的flex-shrink为 0，其他项目为 1，则前者不会缩小。&#xA;flex-basis：指定项目在主轴上的初始大小。默认值为auto，表示由内容决定大小。可以设置为具体的长度值或百分比。&#xA;Grid 网格布局（Grid）将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。&#xA;参考：CSS Grid 网格布局教程，作者： 阮一峰&#xA;grid-template-columns：用于定义网格的列的大小和布局。您可以指定具体的长度值或使用关键字来定义列的大小。例如： .grid-container { display: grid; grid-template-columns: 100px 200px 1fr; } 上述示例中，网格容器有三个列，第一列的宽度为 100px，第二列的宽度为 200px，第三列的宽度为剩余空间的 1 份（fr 表示分数）。&#xA;grid-template-rows：用于定义网格的行的大小和布局。与 grid-template-columns 类似，您可以指定具体的长度值或使用关键字来定义行的大小。例如： .grid-container { display: grid; grid-template-rows: 50px auto 1fr; } 上述示例中，网格容器有三行，第一行的高度为 50px，第二行的高度为内容的高度，第三行的高度为剩余空间的 1 份。&#xA;repeat()：该函数可以用于重复一个模式。它接受两个参数，第一个参数是重复的次数，第二个参数是要重复的模式。例如： .grid-container { display: grid; grid-template-columns: repeat(3, 100px); } 上述示例中，网格容器有三个列，每个列的宽度都为 100px。</description>
    </item>
    <item>
      <title>前端开发学习笔记(四) : 盒子模型</title>
      <link>https://blog.youngzm.com/post/frontend-web-notes/4/</link>
      <pubDate>Tue, 13 Feb 2024 00:00:01 +0800</pubDate>
      <guid>https://blog.youngzm.com/post/frontend-web-notes/4/</guid>
      <description>盒子模型 盒子模型主要由以下四个部分组成：&#xA;内容（Content）: 它是盒子模型的中心部分，包含了实际的内容，比如文本、图片等。&#xA;内边距（Padding）: 内边距位于内容区域的外围。&#xA;边框（Border）: 边框环绕在内边距的外侧。&#xA;外边距（Margin）: 外边距是盒子模型的最外层，可以控制元素之间的间隔。&#xA;盒子的宽度（Width）：盒子的宽度由内容宽度、内边距和边框宽度的总和决定。&#xA;盒子的高度（Height）：盒子的高度由内容高度、内边距和边框高度的总和决定。&#xA;width：设置盒子的宽度。&#xA;.box { width: 300px; } height：设置盒子的高度。&#xA;.box { height: 200px; } padding：设置盒子的内边距，控制内容与边框之间的空白区域。可以使用padding-top、padding-right、padding-bottom和padding-left来分别指定上、右、下和左的内边距。&#xA;.box { padding: 20px; } border：设置盒子的边框样式、宽度和颜色。可以使用border-width、border-style和border-color分别指定边框的宽度、样式和颜色。也可以使用border-top、border-right、border-bottom和border-left来分别指定上、右、下和左的边框。&#xA;.box { border: 1px solid #000; } margin：设置盒子的外边距，控制元素与其他元素之间的间隔。可以使用margin-top、margin-right、margin-bottom和margin-left来分别指定上、右、下和左的外边距。&#xA;.box { margin: 10px; } box-sizing：指定盒子模型的类型，可以是content-box（标准盒子模型）或border-box（IE 盒子模型）。 盒子模型（Box Model）是 CSS 中用来描述和布局 HTML 元素的概念。它将每个 HTML 元素看作一个矩形的盒子，由内容区域、内边距、边框和外边距组成。&#xA;在 CSS 中，盒子模型有两种常见的类型：&#xA;标准盒子模型（Content Box Model）： 标准盒子模型是 CSS 的默认盒子模型。在标准盒子模型中，一个元素的宽度和高度仅包括其内容区域（content area），不包括内边距、边框和外边距。 +---------------------------+ | content area | | | +---------------------------+ 在标准盒子模型中，元素的总宽度 = 左内边距 + 左边框 + 内容宽度 + 右边框 + 右内边距，元素的总高度 = 上内边距 + 上边框 + 内容高度 + 下边框 + 下内边距。</description>
    </item>
    <item>
      <title>前端开发学习笔记(三) : HTML5的一些[新]标准</title>
      <link>https://blog.youngzm.com/post/frontend-web-notes/3/</link>
      <pubDate>Thu, 08 Feb 2024 00:00:01 +0800</pubDate>
      <guid>https://blog.youngzm.com/post/frontend-web-notes/3/</guid>
      <description>语义化标签 HTML5 引入了一些新的语义化标签，这些标签有助于更清晰地描述页面结构和内容。它们提供了更具有可读性和可维护性的 HTML 代码，同时也使搜索引擎和辅助技术更好地理解网页。&#xA;&amp;lt;header&amp;gt;：表示页面或节的顶部，通常包含网站的标题、导航栏或其他引导性内容。 &amp;lt;nav&amp;gt;：表示导航区域，通常包含网站的主要导航链接。 &amp;lt;section&amp;gt;：表示文档中的一个独立节或主题，通常包含一组相关的内容。 &amp;lt;article&amp;gt;：表示独立的、完整的、可以独立分配或重用的内容，如博客文章、新闻报道等。 &amp;lt;footer&amp;gt;：表示页面或节的底部，通常包含版权信息、联系方式或其他辅助性内容。 &amp;lt;header&amp;gt; &amp;lt;h1&amp;gt;My Website&amp;lt;/h1&amp;gt; &amp;lt;nav&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;/&amp;#34;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;/about&amp;#34;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;/contact&amp;#34;&amp;gt;Contact&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/nav&amp;gt; &amp;lt;/header&amp;gt; &amp;lt;section&amp;gt; &amp;lt;h2&amp;gt;About Us&amp;lt;/h2&amp;gt; &amp;lt;p&amp;gt;Welcome to our website! We are a team of passionate individuals...&amp;lt;/p&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;article&amp;gt; &amp;lt;h3&amp;gt;10 Tips for a Healthy Lifestyle&amp;lt;/h3&amp;gt; &amp;lt;p&amp;gt;Here are some valuable tips to maintain a healthy lifestyle...&amp;lt;/p&amp;gt; &amp;lt;/article&amp;gt; &amp;lt;footer&amp;gt; &amp;lt;p&amp;gt;&amp;amp;copy; 2022 My Website. All rights reserved.&amp;lt;/p&amp;gt; &amp;lt;/footer&amp;gt; 语义化标签的选择器 语义化标签可以使用 JavaScript 和 CSS 来选择和操作，就像其他 HTML 元素一样。可以使用各种选择器和操作方法来选择和修改语义化标签。</description>
    </item>
  </channel>
</rss>
