<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSS3 on YoungZM&#39;s Blog</title>
    <link>https://blog.youngzm.com/tags/css3/</link>
    <description>Recent content in CSS3 on YoungZM&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <copyright>Copyright 2023@YoungZM</copyright>
    <lastBuildDate>Fri, 16 Feb 2024 00:00:01 +0800</lastBuildDate>
    <atom:link href="https://blog.youngzm.com/tags/css3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>前端开发学习笔记(五) : CSS3的[新]特性</title>
      <link>https://blog.youngzm.com/post/frontend-web-notes/5/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:01 +0800</pubDate>
      <guid>https://blog.youngzm.com/post/frontend-web-notes/5/</guid>
      <description>常见 弹性盒子（Flexbox） 弹性盒子（Flexbox）用于创建灵活且响应式的布局。它通过指定容器和其内部元素的属性来实现灵活的布局。&#xA;参考：Flex 布局教程：语法篇&#xA;要使用弹性盒子布局，需要设置一个容器元素的display属性为flex或inline-flex。容器元素的子元素将成为弹性盒子的项目。&#xA;以下是弹性盒子中常用的属性和其作用：&#xA;flex-direction：指定弹性盒子的主轴方向。默认值是row，表示从左到右排列。其他值包括column（从上到下排列）、row-reverse（从右到左排列）和column-reverse（从下到上排列）。&#xA;justify-content：控制项目在主轴上的对齐方式。可以使用不同的值，如flex-start（默认值，左对齐）、flex-end（右对齐）、center（居中对齐）、space-between（两端对齐，项目之间平均分布）和space-around（项目两侧留有间隔，项目之间平均分布）。&#xA;align-items：控制项目在交叉轴上的对齐方式。可以使用不同的值，如flex-start（顶部对齐）、flex-end（底部对齐）、center（居中对齐）、baseline（基线对齐）和stretch（拉伸填充）。&#xA;flex-wrap：控制项目是否换行。默认值是nowrap，表示不换行。其他值包括wrap（换行）和wrap-reverse（反向换行）。&#xA;align-content：控制多行弹性盒子在交叉轴上的对齐方式。适用于多行弹性盒子，当有多行时，可以使用不同值来控制对齐方式。&#xA;flex-grow：指定项目的放大比例。默认值为 0，表示不放大。如果所有项目的flex-grow都为 1，则它们将平均分配剩余空间。如果一个项目的flex-grow为 2，其他项目为 1，则前者将获得更多的剩余空间。&#xA;flex-shrink：指定项目的缩小比例。默认值为 1，表示当空间不足时，项目将等比例缩小。如果一个项目的flex-shrink为 0，其他项目为 1，则前者不会缩小。&#xA;flex-basis：指定项目在主轴上的初始大小。默认值为auto，表示由内容决定大小。可以设置为具体的长度值或百分比。&#xA;Grid 网格布局（Grid）将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。&#xA;参考：CSS Grid 网格布局教程，作者： 阮一峰&#xA;grid-template-columns：用于定义网格的列的大小和布局。您可以指定具体的长度值或使用关键字来定义列的大小。例如： .grid-container { display: grid; grid-template-columns: 100px 200px 1fr; } 上述示例中，网格容器有三个列，第一列的宽度为 100px，第二列的宽度为 200px，第三列的宽度为剩余空间的 1 份（fr 表示分数）。&#xA;grid-template-rows：用于定义网格的行的大小和布局。与 grid-template-columns 类似，您可以指定具体的长度值或使用关键字来定义行的大小。例如： .grid-container { display: grid; grid-template-rows: 50px auto 1fr; } 上述示例中，网格容器有三行，第一行的高度为 50px，第二行的高度为内容的高度，第三行的高度为剩余空间的 1 份。&#xA;repeat()：该函数可以用于重复一个模式。它接受两个参数，第一个参数是重复的次数，第二个参数是要重复的模式。例如： .grid-container { display: grid; grid-template-columns: repeat(3, 100px); } 上述示例中，网格容器有三个列，每个列的宽度都为 100px。</description>
    </item>
  </channel>
</rss>
